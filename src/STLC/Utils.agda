module STLC.Utils where

open import STLC.Syntax

open import Data.Nat using (‚Ñï; zero; suc; _+_; _‚â§·µá_)
open import Data.Bool using (if_then_else_)

shiftindices : Term ‚Üí ‚Ñï ‚Üí ‚Ñï ‚Üí Term -- Only do this for free variables, lower and upper bound
shiftindices (var x) i l = if l ‚â§·µá x then var (x + i) else var x 
shiftindices (∆õ t‚ÇÅ) i l = ∆õ (shiftindices t‚ÇÅ i (suc l))
shiftindices (t ¬∑ t‚ÇÅ) i l = shiftindices t i l ¬∑ shiftindices t‚ÇÅ i l
shiftindices z i l = z
shiftindices (s t) i l = s (shiftindices t i l) 
shiftindices nill i l = nill
shiftindices (t ‚à∑l t‚ÇÅ) i l = shiftindices t i l ‚à∑l shiftindices t‚ÇÅ i l
shiftindices nilv i l = nilv
shiftindices (t ‚à∑v t‚ÇÅ ùïü n) i l = shiftindices t i l ‚à∑v shiftindices t‚ÇÅ i l ùïü shiftindices n i l
shiftindices (elimnat t zb‚à∂ t‚ÇÇ sb‚à∂ t‚ÇÉ) i l = 
    elimnat_zb‚à∂_sb‚à∂_ (shiftindices t i l) 
        (shiftindices t‚ÇÇ i l) 
        (shiftindices t‚ÇÉ i (l + 1))
shiftindices (eliml t nb‚à∂ t‚ÇÉ cb‚à∂ t‚ÇÑ) i l = 
    eliml_nb‚à∂_cb‚à∂_ (shiftindices t i l) 
        (shiftindices t‚ÇÉ i l) 
        (shiftindices t‚ÇÑ i (l + 2))
shiftindices (elimv x nb‚à∂ nb cb‚à∂ cb) i l = 
    elimv shiftindices x i l 
        nb‚à∂ shiftindices nb i l
        cb‚à∂ shiftindices cb i (l + 3)

-- Consider parallel subtitutions to deal with free variable capture

-- Could reflection make this more efficient?
_[_/_]  : Term ‚Üí ‚Ñï ‚Üí Term ‚Üí Term
var 0 [ 0 / a ] = a
var b [ i / a ] = var b 
(∆õ b) [ i / a ] = ∆õ (b [ suc i / shiftindices a 1 0 ])
(b ¬∑ c) [ i / a ] = (b [ i / a ]) ¬∑ (c [ i / a ])
z [ i / a ] = z
s b [ i / a ] = s (b [ i / a ]) 
nill [ i / a ] = nill
(h ‚à∑l t) [ i / a ] = (h [ i / a ]) ‚à∑l (t [ i / a ])
nilv [ i / a ] = nilv
(h ‚à∑v t ùïü n) [ i / a ] = (h [ i / a ]) ‚à∑v (t [ i / a ]) ùïü (n [ i / a ])
(elimnat b zb‚à∂ zb sb‚à∂ sb) [ i / a ] = 
    elimnat b [ i / a ] 
        zb‚à∂ zb [ i / a ] 
        sb‚à∂ (sb [ suc i / shiftindices a 1 0 ])
(eliml b nb‚à∂ nb cb‚à∂ cb) [ i / a ] = 
    eliml b [ i / a ] 
        nb‚à∂ nb [ i / a ] 
        cb‚à∂ (cb [ i + 2 / shiftindices a 2 0 ])
(elimv b nb‚à∂ nb cb‚à∂ cb) [ i / a ] = 
    elimv b [ i / a ]
        nb‚à∂ nb [ i / a ]
        cb‚à∂ (cb [ i + 3 / shiftindices a 3 0 ])

‚àã‚Üí‚Ñï : ‚àÄ {Œì A} ‚Üí Œì ‚àã A ‚Üí ‚Ñï 
‚àã‚Üí‚Ñï Z = 0
‚àã‚Üí‚Ñï (S i) = suc (‚àã‚Üí‚Ñï i)